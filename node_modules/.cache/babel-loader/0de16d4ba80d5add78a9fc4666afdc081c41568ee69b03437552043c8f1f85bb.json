{"ast":null,"code":"import _objectSpread from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nvar VisualElementDragControls = /*#__PURE__*/function () {\n  function VisualElementDragControls(visualElement) {\n    _classCallCheck(this, VisualElementDragControls);\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n  _createClass(VisualElementDragControls, [{\n    key: \"start\",\n    value: function start(originEvent) {\n      var _this = this;\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$snapToCursor = _ref.snapToCursor,\n        snapToCursor = _ref$snapToCursor === void 0 ? false : _ref$snapToCursor;\n      /**\n       * Don't start dragging if this component is exiting\n       */\n      var presenceContext = this.visualElement.presenceContext;\n      if (presenceContext && presenceContext.isPresent === false) return;\n      var onSessionStart = function onSessionStart(event) {\n        // Stop any animations on both axis values immediately. This allows the user to throw and catch\n        // the component.\n        _this.stopAnimation();\n        if (snapToCursor) {\n          _this.snapToCursor(extractEventInfo(event, \"page\").point);\n        }\n      };\n      var onStart = function onStart(event, info) {\n        // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n        var _this$getProps = _this.getProps(),\n          drag = _this$getProps.drag,\n          dragPropagation = _this$getProps.dragPropagation,\n          onDragStart = _this$getProps.onDragStart;\n        if (drag && !dragPropagation) {\n          if (_this.openGlobalLock) _this.openGlobalLock();\n          _this.openGlobalLock = getGlobalLock(drag);\n          // If we don 't have the lock, don't start dragging\n          if (!_this.openGlobalLock) return;\n        }\n        _this.isDragging = true;\n        _this.currentDirection = null;\n        _this.resolveConstraints();\n        if (_this.visualElement.projection) {\n          _this.visualElement.projection.isAnimationBlocked = true;\n          _this.visualElement.projection.target = undefined;\n        }\n        /**\n         * Record gesture origin\n         */\n        eachAxis(function (axis) {\n          var current = _this.getAxisMotionValue(axis).get() || 0;\n          /**\n           * If the MotionValue is a percentage value convert to px\n           */\n          if (percent.test(current)) {\n            var projection = _this.visualElement.projection;\n            if (projection && projection.layout) {\n              var measuredAxis = projection.layout.layoutBox[axis];\n              if (measuredAxis) {\n                var length = calcLength(measuredAxis);\n                current = length * (parseFloat(current) / 100);\n              }\n            }\n          }\n          _this.originPoint[axis] = current;\n        });\n        // Fire onDragStart event\n        onDragStart && onDragStart(event, info);\n        var animationState = _this.visualElement.animationState;\n        animationState && animationState.setActive(AnimationType.Drag, true);\n      };\n      var onMove = function onMove(event, info) {\n        // latestPointerEvent = event\n        var _this$getProps2 = _this.getProps(),\n          dragPropagation = _this$getProps2.dragPropagation,\n          dragDirectionLock = _this$getProps2.dragDirectionLock,\n          onDirectionLock = _this$getProps2.onDirectionLock,\n          onDrag = _this$getProps2.onDrag;\n        // If we didn't successfully receive the gesture lock, early return.\n        if (!dragPropagation && !_this.openGlobalLock) return;\n        var offset = info.offset;\n        // Attempt to detect drag direction if directionLock is true\n        if (dragDirectionLock && _this.currentDirection === null) {\n          _this.currentDirection = getCurrentDirection(offset);\n          // If we've successfully set a direction, notify listener\n          if (_this.currentDirection !== null) {\n            onDirectionLock && onDirectionLock(_this.currentDirection);\n          }\n          return;\n        }\n        // Update each point with the latest position\n        _this.updateAxis(\"x\", info.point, offset);\n        _this.updateAxis(\"y\", info.point, offset);\n        /**\n         * Ideally we would leave the renderer to fire naturally at the end of\n         * this frame but if the element is about to change layout as the result\n         * of a re-render we want to ensure the browser can read the latest\n         * bounding box to ensure the pointer and element don't fall out of sync.\n         */\n        _this.visualElement.render();\n        /**\n         * This must fire after the render call as it might trigger a state\n         * change which itself might trigger a layout update.\n         */\n        onDrag && onDrag(event, info);\n      };\n      var onSessionEnd = function onSessionEnd(event, info) {\n        return _this.stop(event, info);\n      };\n      this.panSession = new PanSession(originEvent, {\n        onSessionStart: onSessionStart,\n        onStart: onStart,\n        onMove: onMove,\n        onSessionEnd: onSessionEnd\n      }, {\n        transformPagePoint: this.visualElement.getTransformPagePoint()\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(event, info) {\n      var isDragging = this.isDragging;\n      this.cancel();\n      if (!isDragging) return;\n      var velocity = info.velocity;\n      this.startAnimation(velocity);\n      var _this$getProps3 = this.getProps(),\n        onDragEnd = _this$getProps3.onDragEnd;\n      onDragEnd && onDragEnd(event, info);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.isDragging = false;\n      var _this$visualElement = this.visualElement,\n        projection = _this$visualElement.projection,\n        animationState = _this$visualElement.animationState;\n      if (projection) {\n        projection.isAnimationBlocked = false;\n      }\n      this.panSession && this.panSession.end();\n      this.panSession = undefined;\n      var _this$getProps4 = this.getProps(),\n        dragPropagation = _this$getProps4.dragPropagation;\n      if (!dragPropagation && this.openGlobalLock) {\n        this.openGlobalLock();\n        this.openGlobalLock = null;\n      }\n      animationState && animationState.setActive(AnimationType.Drag, false);\n    }\n  }, {\n    key: \"updateAxis\",\n    value: function updateAxis(axis, _point, offset) {\n      var _this$getProps5 = this.getProps(),\n        drag = _this$getProps5.drag;\n      // If we're not dragging this axis, do an early return.\n      if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n      var axisValue = this.getAxisMotionValue(axis);\n      var next = this.originPoint[axis] + offset[axis];\n      // Apply constraints\n      if (this.constraints && this.constraints[axis]) {\n        next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n      }\n      axisValue.set(next);\n    }\n  }, {\n    key: \"resolveConstraints\",\n    value: function resolveConstraints() {\n      var _this2 = this;\n      var _this$getProps6 = this.getProps(),\n        dragConstraints = _this$getProps6.dragConstraints,\n        dragElastic = _this$getProps6.dragElastic;\n      var _ref2 = this.visualElement.projection || {},\n        layout = _ref2.layout;\n      var prevConstraints = this.constraints;\n      if (dragConstraints && isRefObject(dragConstraints)) {\n        if (!this.constraints) {\n          this.constraints = this.resolveRefConstraints();\n        }\n      } else {\n        if (dragConstraints && layout) {\n          this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n        } else {\n          this.constraints = false;\n        }\n      }\n      this.elastic = resolveDragElastic(dragElastic);\n      /**\n       * If we're outputting to external MotionValues, we want to rebase the measured constraints\n       * from viewport-relative to component-relative.\n       */\n      if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n        eachAxis(function (axis) {\n          if (_this2.getAxisMotionValue(axis)) {\n            _this2.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], _this2.constraints[axis]);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"resolveRefConstraints\",\n    value: function resolveRefConstraints() {\n      var _this$getProps7 = this.getProps(),\n        constraints = _this$getProps7.dragConstraints,\n        onMeasureDragConstraints = _this$getProps7.onMeasureDragConstraints;\n      if (!constraints || !isRefObject(constraints)) return false;\n      var constraintsElement = constraints.current;\n      invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n      var projection = this.visualElement.projection;\n      // TODO\n      if (!projection || !projection.layout) return false;\n      var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n      var measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n      /**\n       * If there's an onMeasureDragConstraints listener we call it and\n       * if different constraints are returned, set constraints to that\n       */\n      if (onMeasureDragConstraints) {\n        var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n        this.hasMutatedConstraints = !!userConstraints;\n        if (userConstraints) {\n          measuredConstraints = convertBoundingBoxToBox(userConstraints);\n        }\n      }\n      return measuredConstraints;\n    }\n  }, {\n    key: \"startAnimation\",\n    value: function startAnimation(velocity) {\n      var _this3 = this;\n      var _this$getProps8 = this.getProps(),\n        drag = _this$getProps8.drag,\n        dragMomentum = _this$getProps8.dragMomentum,\n        dragElastic = _this$getProps8.dragElastic,\n        dragTransition = _this$getProps8.dragTransition,\n        dragSnapToOrigin = _this$getProps8.dragSnapToOrigin,\n        onDragTransitionEnd = _this$getProps8.onDragTransitionEnd;\n      var constraints = this.constraints || {};\n      var momentumAnimations = eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, _this3.currentDirection)) {\n          return;\n        }\n        var transition = constraints && constraints[axis] || {};\n        if (dragSnapToOrigin) transition = {\n          min: 0,\n          max: 0\n        };\n        /**\n         * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n         * of spring animations so we should look into adding a disable spring option to `inertia`.\n         * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n         * using the value of `dragElastic`.\n         */\n        var bounceStiffness = dragElastic ? 200 : 1000000;\n        var bounceDamping = dragElastic ? 40 : 10000000;\n        var inertia = _objectSpread(_objectSpread({\n          type: \"inertia\",\n          velocity: dragMomentum ? velocity[axis] : 0,\n          bounceStiffness: bounceStiffness,\n          bounceDamping: bounceDamping,\n          timeConstant: 750,\n          restDelta: 1,\n          restSpeed: 10\n        }, dragTransition), transition);\n        // If we're not animating on an externally-provided `MotionValue` we can use the\n        // component's animation controls which will handle interactions with whileHover (etc),\n        // otherwise we just have to animate the `MotionValue` itself.\n        return _this3.startAxisValueAnimation(axis, inertia);\n      });\n      // Run all animations and then resolve the new drag constraints.\n      return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n  }, {\n    key: \"startAxisValueAnimation\",\n    value: function startAxisValueAnimation(axis, transition) {\n      var axisValue = this.getAxisMotionValue(axis);\n      return axisValue.start(createMotionValueAnimation(axis, axisValue, 0, transition));\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      var _this4 = this;\n      eachAxis(function (axis) {\n        return _this4.getAxisMotionValue(axis).stop();\n      });\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n  }, {\n    key: \"getAxisMotionValue\",\n    value: function getAxisMotionValue(axis) {\n      var dragKey = \"_drag\" + axis.toUpperCase();\n      var props = this.visualElement.getProps();\n      var externalMotionValue = props[dragKey];\n      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n  }, {\n    key: \"snapToCursor\",\n    value: function snapToCursor(point) {\n      var _this5 = this;\n      eachAxis(function (axis) {\n        var _this5$getProps = _this5.getProps(),\n          drag = _this5$getProps.drag;\n        // If we're not dragging this axis, do an early return.\n        if (!shouldDrag(axis, drag, _this5.currentDirection)) return;\n        var projection = _this5.visualElement.projection;\n        var axisValue = _this5.getAxisMotionValue(axis);\n        if (projection && projection.layout) {\n          var _projection$layout$la = projection.layout.layoutBox[axis],\n            min = _projection$layout$la.min,\n            max = _projection$layout$la.max;\n          axisValue.set(point[axis] - mix(min, max, 0.5));\n        }\n      });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n  }, {\n    key: \"scalePositionWithinConstraints\",\n    value: function scalePositionWithinConstraints() {\n      var _this6 = this;\n      if (!this.visualElement.current) return;\n      var _this$getProps9 = this.getProps(),\n        drag = _this$getProps9.drag,\n        dragConstraints = _this$getProps9.dragConstraints;\n      var projection = this.visualElement.projection;\n      if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n      /**\n       * Stop current animations as there can be visual glitching if we try to do\n       * this mid-animation\n       */\n      this.stopAnimation();\n      /**\n       * Record the relative position of the dragged element relative to the\n       * constraints box and save as a progress value.\n       */\n      var boxProgress = {\n        x: 0,\n        y: 0\n      };\n      eachAxis(function (axis) {\n        var axisValue = _this6.getAxisMotionValue(axis);\n        if (axisValue) {\n          var latest = axisValue.get();\n          boxProgress[axis] = calcOrigin({\n            min: latest,\n            max: latest\n          }, _this6.constraints[axis]);\n        }\n      });\n      /**\n       * Update the layout of this element and resolve the latest drag constraints\n       */\n      var _this$visualElement$g = this.visualElement.getProps(),\n        transformTemplate = _this$visualElement$g.transformTemplate;\n      this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n      this.resolveConstraints();\n      /**\n       * For each axis, calculate the current progress of the layout axis\n       * within the new constraints.\n       */\n      eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, null)) return;\n        /**\n         * Calculate a new transform based on the previous box progress\n         */\n        var axisValue = _this6.getAxisMotionValue(axis);\n        var _this6$constraints$ax = _this6.constraints[axis],\n          min = _this6$constraints$ax.min,\n          max = _this6$constraints$ax.max;\n        axisValue.set(mix(min, max, boxProgress[axis]));\n      });\n    }\n  }, {\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this7 = this;\n      if (!this.visualElement.current) return;\n      elementDragControls.set(this.visualElement, this);\n      var element = this.visualElement.current;\n      /**\n       * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n       */\n      var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n        var _this7$getProps = _this7.getProps(),\n          drag = _this7$getProps.drag,\n          _this7$getProps$dragL = _this7$getProps.dragListener,\n          dragListener = _this7$getProps$dragL === void 0 ? true : _this7$getProps$dragL;\n        drag && dragListener && _this7.start(event);\n      });\n      var measureDragConstraints = function measureDragConstraints() {\n        var _this7$getProps2 = _this7.getProps(),\n          dragConstraints = _this7$getProps2.dragConstraints;\n        if (isRefObject(dragConstraints)) {\n          _this7.constraints = _this7.resolveRefConstraints();\n        }\n      };\n      var projection = this.visualElement.projection;\n      var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n      if (projection && !projection.layout) {\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n      }\n      measureDragConstraints();\n      /**\n       * Attach a window resize listener to scale the draggable target within its defined\n       * constraints as the window resizes.\n       */\n      var stopResizeListener = addDomEvent(window, \"resize\", function () {\n        return _this7.scalePositionWithinConstraints();\n      });\n      /**\n       * If the element's layout changes, calculate the delta and apply that to\n       * the drag gesture's origin point.\n       */\n      var stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", function (_ref3) {\n        var delta = _ref3.delta,\n          hasLayoutChanged = _ref3.hasLayoutChanged;\n        if (_this7.isDragging && hasLayoutChanged) {\n          eachAxis(function (axis) {\n            var motionValue = _this7.getAxisMotionValue(axis);\n            if (!motionValue) return;\n            _this7.originPoint[axis] += delta[axis].translate;\n            motionValue.set(motionValue.get() + delta[axis].translate);\n          });\n          _this7.visualElement.render();\n        }\n      });\n      return function () {\n        stopResizeListener();\n        stopPointerListener();\n        stopMeasureLayoutListener();\n        stopLayoutUpdateListener && stopLayoutUpdateListener();\n      };\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      var props = this.visualElement.getProps();\n      var _props$drag = props.drag,\n        drag = _props$drag === void 0 ? false : _props$drag,\n        _props$dragDirectionL = props.dragDirectionLock,\n        dragDirectionLock = _props$dragDirectionL === void 0 ? false : _props$dragDirectionL,\n        _props$dragPropagatio = props.dragPropagation,\n        dragPropagation = _props$dragPropagatio === void 0 ? false : _props$dragPropagatio,\n        _props$dragConstraint = props.dragConstraints,\n        dragConstraints = _props$dragConstraint === void 0 ? false : _props$dragConstraint,\n        _props$dragElastic = props.dragElastic,\n        dragElastic = _props$dragElastic === void 0 ? defaultElastic : _props$dragElastic,\n        _props$dragMomentum = props.dragMomentum,\n        dragMomentum = _props$dragMomentum === void 0 ? true : _props$dragMomentum;\n      return _objectSpread(_objectSpread({}, props), {}, {\n        drag: drag,\n        dragDirectionLock: dragDirectionLock,\n        dragPropagation: dragPropagation,\n        dragConstraints: dragConstraints,\n        dragElastic: dragElastic,\n        dragMomentum: dragMomentum\n      });\n    }\n  }]);\n  return VisualElementDragControls;\n}();\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset) {\n  var lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var direction = null;\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n  return direction;\n}\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","calcViewportConstraints","defaultElastic","rebaseAxisConstraints","calcOrigin","AnimationType","createBox","eachAxis","measurePageBox","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","calcLength","mix","percent","createMotionValueAnimation","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","presenceContext","isPresent","onSessionStart","event","stopAnimation","point","onStart","info","getProps","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","current","getAxisMotionValue","get","test","layout","measuredAxis","layoutBox","length","parseFloat","animationState","setActive","Drag","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","panSession","transformPagePoint","getTransformPagePoint","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","start","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","boxProgress","latest","transformTemplate","style","transform","updateScroll","updateLayout","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","scalePositionWithinConstraints","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","translate","direction","lockThreshold","Math","abs"],"sources":["/home/home/Desktop/MyCode/Assignments/assign/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from 'hey-listen';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart && onDragStart(event, info);\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(AnimationType.Drag, true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        onDragEnd && onDragEnd(event, info);\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(AnimationType.Drag, false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(createMotionValueAnimation(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}