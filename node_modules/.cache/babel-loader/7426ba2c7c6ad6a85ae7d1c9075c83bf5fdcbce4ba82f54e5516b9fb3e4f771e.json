{"ast":null,"code":"import _toConsumableArray from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"willChange\"],\n  _excluded2 = [\"children\"];\nimport { sync, cancelSync } from '../frameloop/index.mjs';\nimport { warning, invariant } from 'hey-listen';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nvar featureNames = Object.keys(featureDefinitions);\nvar numFeatures = featureNames.length;\nvar propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nvar VisualElement = /*#__PURE__*/function () {\n  function VisualElement(_ref) {\n    var _this = this;\n    var parent = _ref.parent,\n      props = _ref.props,\n      presenceContext = _ref.presenceContext,\n      reducedMotionConfig = _ref.reducedMotionConfig,\n      visualState = _ref.visualState;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, VisualElement);\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    this.values = new Map();\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n    this.propEventSubscriptions = {};\n    this.notifyUpdate = function () {\n      return _this.notify(\"Update\", _this.latestValues);\n    };\n    this.render = function () {\n      if (!_this.current) return;\n      _this.triggerBuild();\n      _this.renderInstance(_this.current, _this.renderState, _this.props.style, _this.projection);\n    };\n    this.scheduleRender = function () {\n      return sync.render(_this.render, false, true);\n    };\n    var latestValues = visualState.latestValues,\n      renderState = visualState.renderState;\n    this.latestValues = latestValues;\n    this.baseTarget = _objectSpread({}, latestValues);\n    this.initialValues = props.initial ? _objectSpread({}, latestValues) : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    var _this$scrapeMotionVal = this.scrapeMotionValuesFromProps(props, {}),\n      willChange = _this$scrapeMotionVal.willChange,\n      initialMotionValues = _objectWithoutProperties(_this$scrapeMotionVal, _excluded);\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n  }\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n  _createClass(VisualElement, [{\n    key: \"scrapeMotionValuesFromProps\",\n    value: function scrapeMotionValuesFromProps(_props, _prevProps) {\n      return {};\n    }\n  }, {\n    key: \"mount\",\n    value: function mount(instance) {\n      var _this2 = this;\n      this.current = instance;\n      if (this.projection) {\n        this.projection.mount(instance);\n      }\n      if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n        this.removeFromVariantTree = this.parent.addVariantChild(this);\n      }\n      this.values.forEach(function (value, key) {\n        return _this2.bindToMotionValue(key, value);\n      });\n      if (!hasReducedMotionListener.current) {\n        initPrefersReducedMotion();\n      }\n      this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n      if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n      }\n      if (this.parent) this.parent.children.add(this);\n      this.update(this.props, this.presenceContext);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      this.projection && this.projection.unmount();\n      cancelSync.update(this.notifyUpdate);\n      cancelSync.render(this.render);\n      this.valueSubscriptions.forEach(function (remove) {\n        return remove();\n      });\n      this.removeFromVariantTree && this.removeFromVariantTree();\n      this.parent && this.parent.children.delete(this);\n      for (var key in this.events) {\n        this.events[key].clear();\n      }\n      for (var _key in this.features) {\n        this.features[_key].unmount();\n      }\n      this.current = null;\n    }\n  }, {\n    key: \"bindToMotionValue\",\n    value: function bindToMotionValue(key, value) {\n      var _this3 = this;\n      var valueIsTransform = transformProps.has(key);\n      var removeOnChange = value.on(\"change\", function (latestValue) {\n        _this3.latestValues[key] = latestValue;\n        _this3.props.onUpdate && sync.update(_this3.notifyUpdate, false, true);\n        if (valueIsTransform && _this3.projection) {\n          _this3.projection.isTransformDirty = true;\n        }\n      });\n      var removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n      this.valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n  }, {\n    key: \"sortNodePosition\",\n    value: function sortNodePosition(other) {\n      /**\n       * If these nodes aren't even of the same type we can't compare their depth.\n       */\n      if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n        return 0;\n      }\n      return this.sortInstanceNodePosition(this.current, other.current);\n    }\n  }, {\n    key: \"loadFeatures\",\n    value: function loadFeatures(_ref2, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig) {\n      var _this4 = this;\n      var children = _ref2.children,\n        renderedProps = _objectWithoutProperties(_ref2, _excluded2);\n      var ProjectionNodeConstructor;\n      var MeasureLayout;\n      /**\n       * If we're in development mode, check to make sure we're not rendering a motion component\n       * as a child of LazyMotion, as this will break the file-size benefits of using it.\n       */\n      if (process.env.NODE_ENV !== \"production\" && preloadedFeatures && isStrict) {\n        var strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);\n      }\n      for (var i = 0; i < numFeatures; i++) {\n        var name = featureNames[i];\n        var _featureDefinitions$n = featureDefinitions[name],\n          isEnabled = _featureDefinitions$n.isEnabled,\n          FeatureConstructor = _featureDefinitions$n.Feature,\n          ProjectionNode = _featureDefinitions$n.ProjectionNode,\n          MeasureLayoutComponent = _featureDefinitions$n.MeasureLayout;\n        if (ProjectionNode) ProjectionNodeConstructor = ProjectionNode;\n        if (isEnabled(renderedProps)) {\n          if (!this.features[name] && FeatureConstructor) {\n            this.features[name] = new FeatureConstructor(this);\n          }\n          if (MeasureLayoutComponent) {\n            MeasureLayout = MeasureLayoutComponent;\n          }\n        }\n      }\n      if (!this.projection && ProjectionNodeConstructor) {\n        this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n        var layoutId = renderedProps.layoutId,\n          layout = renderedProps.layout,\n          drag = renderedProps.drag,\n          dragConstraints = renderedProps.dragConstraints,\n          layoutScroll = renderedProps.layoutScroll,\n          layoutRoot = renderedProps.layoutRoot;\n        this.projection.setOptions({\n          layoutId: layoutId,\n          layout: layout,\n          alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n          visualElement: this,\n          scheduleRender: function scheduleRender() {\n            return _this4.scheduleRender();\n          },\n          /**\n           * TODO: Update options in an effect. This could be tricky as it'll be too late\n           * to update by the time layout animations run.\n           * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n           * ensuring it gets called if there's no potential layout animations.\n           *\n           */\n          animationType: typeof layout === \"string\" ? layout : \"both\",\n          initialPromotionConfig: initialLayoutGroupConfig,\n          layoutScroll: layoutScroll,\n          layoutRoot: layoutRoot\n        });\n      }\n      return MeasureLayout;\n    }\n  }, {\n    key: \"updateFeatures\",\n    value: function updateFeatures() {\n      for (var key in this.features) {\n        var feature = this.features[key];\n        if (feature.isMounted) {\n          feature.update(this.props, this.prevProps);\n        } else {\n          feature.mount();\n          feature.isMounted = true;\n        }\n      }\n    }\n  }, {\n    key: \"triggerBuild\",\n    value: function triggerBuild() {\n      this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n  }, {\n    key: \"measureViewportBox\",\n    value: function measureViewportBox() {\n      return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n    }\n  }, {\n    key: \"getStaticValue\",\n    value: function getStaticValue(key) {\n      return this.latestValues[key];\n    }\n  }, {\n    key: \"setStaticValue\",\n    value: function setStaticValue(key, value) {\n      this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n  }, {\n    key: \"makeTargetAnimatable\",\n    value: function makeTargetAnimatable(target) {\n      var canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n  }, {\n    key: \"update\",\n    value: function update(props, presenceContext) {\n      if (props.transformTemplate || this.props.transformTemplate) {\n        this.scheduleRender();\n      }\n      this.prevProps = this.props;\n      this.props = props;\n      this.prevPresenceContext = this.presenceContext;\n      this.presenceContext = presenceContext;\n      /**\n       * Update prop event handlers ie onAnimationStart, onAnimationComplete\n       */\n      for (var i = 0; i < propEventHandlers.length; i++) {\n        var key = propEventHandlers[i];\n        if (this.propEventSubscriptions[key]) {\n          this.propEventSubscriptions[key]();\n          delete this.propEventSubscriptions[key];\n        }\n        var listener = props[\"on\" + key];\n        if (listener) {\n          this.propEventSubscriptions[key] = this.on(key, listener);\n        }\n      }\n      this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n      if (this.handleChildMotionValue) {\n        this.handleChildMotionValue();\n      }\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n  }, {\n    key: \"getVariant\",\n    value: function getVariant(name) {\n      return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n  }, {\n    key: \"getDefaultTransition\",\n    value: function getDefaultTransition() {\n      return this.props.transition;\n    }\n  }, {\n    key: \"getTransformPagePoint\",\n    value: function getTransformPagePoint() {\n      return this.props.transformPagePoint;\n    }\n  }, {\n    key: \"getClosestVariantNode\",\n    value: function getClosestVariantNode() {\n      return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n    }\n  }, {\n    key: \"getVariantContext\",\n    value: function getVariantContext() {\n      var startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (startAtParent) {\n        return this.parent ? this.parent.getVariantContext() : undefined;\n      }\n      if (!this.isControllingVariants) {\n        var _context = this.parent ? this.parent.getVariantContext() || {} : {};\n        if (this.props.initial !== undefined) {\n          _context.initial = this.props.initial;\n        }\n        return _context;\n      }\n      var context = {};\n      for (var i = 0; i < numVariantProps; i++) {\n        var name = variantProps[i];\n        var prop = this.props[name];\n        if (isVariantLabel(prop) || prop === false) {\n          context[name] = prop;\n        }\n      }\n      return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n  }, {\n    key: \"addVariantChild\",\n    value: function addVariantChild(child) {\n      var closestVariantNode = this.getClosestVariantNode();\n      if (closestVariantNode) {\n        closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n        return function () {\n          return closestVariantNode.variantChildren.delete(child);\n        };\n      }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n  }, {\n    key: \"addValue\",\n    value: function addValue(key, value) {\n      // Remove existing value if it exists\n      if (value !== this.values.get(key)) {\n        this.removeValue(key);\n        this.bindToMotionValue(key, value);\n      }\n      this.values.set(key, value);\n      this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      this.values.delete(key);\n      var unsubscribe = this.valueSubscriptions.get(key);\n      if (unsubscribe) {\n        unsubscribe();\n        this.valueSubscriptions.delete(key);\n      }\n      delete this.latestValues[key];\n      this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n  }, {\n    key: \"hasValue\",\n    value: function hasValue(key) {\n      return this.values.has(key);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key, defaultValue) {\n      if (this.props.values && this.props.values[key]) {\n        return this.props.values[key];\n      }\n      var value = this.values.get(key);\n      if (value === undefined && defaultValue !== undefined) {\n        value = motionValue(defaultValue, {\n          owner: this\n        });\n        this.addValue(key, value);\n      }\n      return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n  }, {\n    key: \"readValue\",\n    value: function readValue(key) {\n      return this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n  }, {\n    key: \"setBaseTarget\",\n    value: function setBaseTarget(key, value) {\n      this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n  }, {\n    key: \"getBaseTarget\",\n    value: function getBaseTarget(key) {\n      var _a;\n      var initial = this.props.initial;\n      var valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n      /**\n       * If this value still exists in the current initial variant, read that.\n       */\n      if (initial && valueFromInitial !== undefined) {\n        return valueFromInitial;\n      }\n      /**\n       * Alternatively, if this VisualElement config has defined a getBaseTarget\n       * so we can read the value from an alternative source, try that.\n       */\n      var target = this.getBaseTargetFromProps(this.props, key);\n      if (target !== undefined && !isMotionValue(target)) return target;\n      /**\n       * If the value was initially defined on initial, but it doesn't any more,\n       * return undefined. Otherwise return the value as initially read from the DOM.\n       */\n      return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n      return this.events[eventName].add(callback);\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(eventName) {\n      if (this.events[eventName]) {\n        var _this$events$eventNam;\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        (_this$events$eventNam = this.events[eventName]).notify.apply(_this$events$eventNam, args);\n      }\n    }\n  }]);\n  return VisualElement;\n}();\nvar variantProps = [\"initial\"].concat(_toConsumableArray(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\nexport { VisualElement };","map":{"version":3,"names":["sync","cancelSync","warning","invariant","createBox","isRefObject","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isWillChangeMotionValue","isMotionValue","transformProps","variantPriorityOrder","isControllingVariants","isVariantNode","isVariantLabel","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureDefinitions","featureNames","Object","keys","numFeatures","length","propEventHandlers","VisualElement","parent","props","presenceContext","reducedMotionConfig","visualState","options","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","scheduleRender","baseTarget","initialValues","initial","depth","variantChildren","manuallyAnimateOnMount","Boolean","scrapeMotionValuesFromProps","willChange","initialMotionValues","key","value","undefined","set","add","_props","_prevProps","instance","mount","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","update","unmount","remove","delete","clear","valueIsTransform","has","removeOnChange","on","latestValue","onUpdate","isTransformDirty","removeOnRenderRequest","other","sortInstanceNodePosition","type","isStrict","preloadedFeatures","projectionId","initialLayoutGroupConfig","renderedProps","ProjectionNodeConstructor","MeasureLayout","strictMessage","ignoreStrict","i","name","isEnabled","FeatureConstructor","Feature","ProjectionNode","MeasureLayoutComponent","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","setOptions","alwaysMeasureLayout","visualElement","animationType","initialPromotionConfig","feature","isMounted","prevProps","build","measureInstanceViewportBox","target","canMutate","makeTargetAnimatableFromInstance","transformTemplate","prevPresenceContext","listener","handleChildMotionValue","variants","transition","transformPagePoint","getClosestVariantNode","startAtParent","getVariantContext","context","numVariantProps","variantProps","prop","child","closestVariantNode","get","removeValue","unsubscribe","removeValueFromRenderState","defaultValue","owner","addValue","readValueFromInstance","_a","valueFromInitial","getBaseTargetFromProps","eventName","callback","args"],"sources":["/home/home/Desktop/MyCode/Assignments/assign/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"sourcesContent":["import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { warning, invariant } from 'hey-listen';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        this.projection && this.projection.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update(this.props, this.prevProps);\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { VisualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}