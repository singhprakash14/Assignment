{"ast":null,"code":"import _classCallCheck from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { addUniqueItem, removeItem } from '../../utils/array.mjs';\nvar NodeStack = /*#__PURE__*/function () {\n  function NodeStack() {\n    _classCallCheck(this, NodeStack);\n    this.members = [];\n  }\n  _createClass(NodeStack, [{\n    key: \"add\",\n    value: function add(node) {\n      addUniqueItem(this.members, node);\n      node.scheduleRender();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      removeItem(this.members, node);\n      if (node === this.prevLead) {\n        this.prevLead = undefined;\n      }\n      if (node === this.lead) {\n        var prevLead = this.members[this.members.length - 1];\n        if (prevLead) {\n          this.promote(prevLead);\n        }\n      }\n    }\n  }, {\n    key: \"relegate\",\n    value: function relegate(node) {\n      var indexOfNode = this.members.findIndex(function (member) {\n        return node === member;\n      });\n      if (indexOfNode === 0) return false;\n      /**\n       * Find the next projection node that is present\n       */\n      var prevLead;\n      for (var i = indexOfNode; i >= 0; i--) {\n        var member = this.members[i];\n        if (member.isPresent !== false) {\n          prevLead = member;\n          break;\n        }\n      }\n      if (prevLead) {\n        this.promote(prevLead);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"promote\",\n    value: function promote(node, preserveFollowOpacity) {\n      var prevLead = this.lead;\n      if (node === prevLead) return;\n      this.prevLead = prevLead;\n      this.lead = node;\n      node.show();\n      if (prevLead) {\n        prevLead.instance && prevLead.scheduleRender();\n        node.scheduleRender();\n        node.resumeFrom = prevLead;\n        if (preserveFollowOpacity) {\n          node.resumeFrom.preserveOpacity = true;\n        }\n        if (prevLead.snapshot) {\n          node.snapshot = prevLead.snapshot;\n          node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n        }\n        if (node.root && node.root.isUpdating) {\n          node.isLayoutDirty = true;\n        }\n        var crossfade = node.options.crossfade;\n        if (crossfade === false) {\n          prevLead.hide();\n        }\n        /**\n         * TODO:\n         *   - Test border radius when previous node was deleted\n         *   - boxShadow mixing\n         *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n         *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n         *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n         * ---\n         *   - Crossfade opacity of root nodes\n         *   - layoutId changes after animation\n         *   - layoutId changes mid animation\n         */\n      }\n    }\n  }, {\n    key: \"exitAnimationComplete\",\n    value: function exitAnimationComplete() {\n      this.members.forEach(function (node) {\n        var options = node.options,\n          resumingFrom = node.resumingFrom;\n        options.onExitComplete && options.onExitComplete();\n        if (resumingFrom) {\n          resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n        }\n      });\n    }\n  }, {\n    key: \"scheduleRender\",\n    value: function scheduleRender() {\n      this.members.forEach(function (node) {\n        node.instance && node.scheduleRender(false);\n      });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n  }, {\n    key: \"removeLeadSnapshot\",\n    value: function removeLeadSnapshot() {\n      if (this.lead && this.lead.snapshot) {\n        this.lead.snapshot = undefined;\n      }\n    }\n  }]);\n  return NodeStack;\n}();\nexport { NodeStack };","map":{"version":3,"names":["addUniqueItem","removeItem","NodeStack","members","node","scheduleRender","prevLead","undefined","lead","length","promote","indexOfNode","findIndex","member","i","isPresent","preserveFollowOpacity","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","root","isUpdating","isLayoutDirty","crossfade","options","hide","forEach","resumingFrom","onExitComplete"],"sources":["/home/home/Desktop/MyCode/Assignments/assign/node_modules/framer-motion/dist/es/projection/shared/stack.mjs"],"sourcesContent":["import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}