{"ast":null,"code":"import _classCallCheck from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/home/Desktop/MyCode/Assignments/assign/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { AnimationType } from '../../../render/utils/types.mjs';\nimport { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\nvar thresholdNames = {\n  some: 0,\n  all: 1\n};\nvar InViewFeature = /*#__PURE__*/function (_Feature) {\n  _inherits(InViewFeature, _Feature);\n  var _super = _createSuper(InViewFeature);\n  function InViewFeature() {\n    var _this;\n    _classCallCheck(this, InViewFeature);\n    _this = _super.apply(this, arguments);\n    _this.hasEnteredView = false;\n    _this.isInView = false;\n    return _this;\n  }\n  /**\n   * TODO: Remove this in 10.0\n   */\n  _createClass(InViewFeature, [{\n    key: \"viewportFallback\",\n    value: function viewportFallback() {\n      var _this2 = this;\n      /**\n       * Fire this in an rAF because, at this point, the animation state\n       * won't have flushed for the first time and there's certain logic in\n       * there that behaves differently on the initial animation.\n       */\n      requestAnimationFrame(function () {\n        _this2.hasEnteredView = true;\n        var _this2$node$getProps = _this2.node.getProps(),\n          onViewportEnter = _this2$node$getProps.onViewportEnter;\n        onViewportEnter && onViewportEnter(null);\n        if (_this2.node.animationState) {\n          _this2.node.animationState.setActive(AnimationType.InView, true);\n        }\n      });\n    }\n  }, {\n    key: \"startObserver\",\n    value: function startObserver() {\n      var _this3 = this;\n      this.unmount();\n      var _this$node$getProps = this.node.getProps(),\n        _this$node$getProps$v = _this$node$getProps.viewport,\n        viewport = _this$node$getProps$v === void 0 ? {} : _this$node$getProps$v;\n      var root = viewport.root,\n        rootMargin = viewport.margin,\n        _viewport$amount = viewport.amount,\n        amount = _viewport$amount === void 0 ? \"some\" : _viewport$amount,\n        once = viewport.once,\n        _viewport$fallback = viewport.fallback,\n        fallback = _viewport$fallback === void 0 ? true : _viewport$fallback;\n      if (typeof IntersectionObserver === \"undefined\") {\n        if (fallback) this.viewportFallback();\n        return;\n      }\n      var options = {\n        root: root ? root.current : undefined,\n        rootMargin: rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n      };\n      var onIntersectionUpdate = function onIntersectionUpdate(entry) {\n        var isIntersecting = entry.isIntersecting;\n        /**\n         * If there's been no change in the viewport state, early return.\n         */\n        if (_this3.isInView === isIntersecting) return;\n        _this3.isInView = isIntersecting;\n        /**\n         * Handle hasEnteredView. If this is only meant to run once, and\n         * element isn't visible, early return. Otherwise set hasEnteredView to true.\n         */\n        if (once && !isIntersecting && _this3.hasEnteredView) {\n          return;\n        } else if (isIntersecting) {\n          _this3.hasEnteredView = true;\n        }\n        if (_this3.node.animationState) {\n          _this3.node.animationState.setActive(AnimationType.InView, isIntersecting);\n        }\n        /**\n         * Use the latest committed props rather than the ones in scope\n         * when this observer is created\n         */\n        var _this3$node$getProps = _this3.node.getProps(),\n          onViewportEnter = _this3$node$getProps.onViewportEnter,\n          onViewportLeave = _this3$node$getProps.onViewportLeave;\n        var callback = isIntersecting ? onViewportEnter : onViewportLeave;\n        callback && callback(entry);\n      };\n      return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      this.startObserver();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (typeof IntersectionObserver === \"undefined\") return;\n      var _this$node = this.node,\n        props = _this$node.props,\n        prevProps = _this$node.prevProps;\n      var hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n      if (hasOptionsChanged) {\n        this.startObserver();\n      }\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n  return InViewFeature;\n}(Feature);\nfunction hasViewportOptionChanged(_ref) {\n  var _ref$viewport = _ref.viewport,\n    viewport = _ref$viewport === void 0 ? {} : _ref$viewport;\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref2$viewport = _ref2.viewport,\n    prevViewport = _ref2$viewport === void 0 ? {} : _ref2$viewport;\n  return function (name) {\n    return viewport[name] !== prevViewport[name];\n  };\n}\nexport { InViewFeature };","map":{"version":3,"names":["AnimationType","Feature","observeIntersection","thresholdNames","some","all","InViewFeature","arguments","hasEnteredView","isInView","requestAnimationFrame","node","getProps","onViewportEnter","animationState","setActive","InView","unmount","viewport","root","rootMargin","margin","amount","once","fallback","IntersectionObserver","viewportFallback","options","current","undefined","threshold","onIntersectionUpdate","entry","isIntersecting","onViewportLeave","callback","startObserver","props","prevProps","hasOptionsChanged","hasViewportOptionChanged","prevViewport","name"],"sources":["/home/home/Desktop/MyCode/Assignments/assign/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs"],"sourcesContent":["import { AnimationType } from '../../../render/utils/types.mjs';\nimport { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    /**\n     * TODO: Remove this in 10.0\n     */\n    viewportFallback() {\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         */\n        requestAnimationFrame(() => {\n            this.hasEnteredView = true;\n            const { onViewportEnter } = this.node.getProps();\n            onViewportEnter && onViewportEnter(null);\n            if (this.node.animationState) {\n                this.node.animationState.setActive(AnimationType.InView, true);\n            }\n        });\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once, fallback = true, } = viewport;\n        if (typeof IntersectionObserver === \"undefined\") {\n            if (fallback)\n                this.viewportFallback();\n            return;\n        }\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(AnimationType.InView, isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}